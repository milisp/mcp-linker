name: Build Cross-Platform

on:
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - ".github/workflows/build.yml"
      - "tauri-app/src/**"
      - "tauri-app/src-tauri/**"
      - "tauri-app/package.json"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: Linux x86_64
            artifact-name: tauri-app-linux-x64
            artifact-path: |
              tauri-app/src-tauri/target/x86_64-unknown-linux-gnu/release/**/*.deb
              tauri-app/src-tauri/target/x86_64-unknown-linux-gnu/release/**/*.rpm
              tauri-app/src-tauri/target/x86_64-unknown-linux-gnu/release/**/*.AppImage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x86_64
            artifact-name: MCP-Linker-Windows
            artifact-path: |
              tauri-app/src-tauri/target/release/bundle/**/*.exe
              tauri-app/src-tauri/target/release/bundle/**/*.msi

    runs-on: ${{ matrix.platform.os }}
    name: Build ${{ matrix.platform.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            libglib2.0-dev \
            libgtk-3-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install Bun - different methods for Linux vs Windows
      - name: Install Bun (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        uses: oven-sh/setup-bun@v1

      - name: Install Bun (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          irm https://bun.sh/install.ps1 | iex
          echo "$HOME\.bun\bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

      - name: Install dependencies
        run: bun install
        working-directory: tauri-app

      - name: Check Tauri version
        run: bun tauri --version
        working-directory: tauri-app

      - name: Set environment variables (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> $GITHUB_ENV
          echo "VITE_REDIRECT_URL=${{ secrets.VITE_REDIRECT_URL }}" >> $GITHUB_ENV
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> $GITHUB_ENV
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
          echo "TAURI_SIGNING_PRIVATE_KEY=${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD=${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Set environment variables (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> $env:GITHUB_ENV
          echo "VITE_REDIRECT_URL=${{ secrets.VITE_REDIRECT_URL }}" >> $env:GITHUB_ENV
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> $env:GITHUB_ENV
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> $env:GITHUB_ENV
          echo "TAURI_SIGNING_PRIVATE_KEY=${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" >> $env:GITHUB_ENV
          echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD=${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build Tauri App (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: bun tauri build --target ${{ matrix.platform.target }}
        working-directory: tauri-app

      - name: Build Tauri App (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: bun tauri build
        working-directory: tauri-app

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact-name }}
          path: ${{ matrix.platform.artifact-path }}

      - name: Generate updater manifest
        if: startsWith(github.ref, 'refs/tags/v') && matrix.platform.os == 'ubuntu-latest'
        shell: bash
        run: |
          # Extract tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Find generated update artifacts with signatures
          LINUX_SIG_FILE=$(find tauri-app/src-tauri/target/x86_64-unknown-linux-gnu/release/bundle -name "*.AppImage.tar.gz.sig" | head -1)
          LINUX_SIG=""
          if [ -f "$LINUX_SIG_FILE" ]; then
            LINUX_SIG=$(cat "$LINUX_SIG_FILE")
          fi
          
          # Create updater.json manifest
          cat > updater.json << EOF
          {
            "version": "$TAG_NAME",
            "notes": "Update to version $TAG_NAME",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "linux-x86_64": {
                "signature": "$LINUX_SIG",
                "url": "https://github.com/milisp/mcp-linker/releases/download/$TAG_NAME/tauri-app-linux-x64.AppImage.tar.gz"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/milisp/mcp-linker/releases/download/$TAG_NAME/MCP-Linker-Windows.msi.zip"
              }
            }
          }
          EOF

      - name: Upload to GitHub Release (with updater manifest)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v') && matrix.platform.os == 'ubuntu-latest'
        with:
          files: |
            ${{ matrix.platform.artifact-path }}
            updater.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GitHub Release (Windows)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v') && matrix.platform.os == 'windows-latest'
        with:
          files: ${{ matrix.platform.artifact-path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}